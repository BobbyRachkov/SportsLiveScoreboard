@model SportsLiveScoreboard.Models.ViewModels.Sport.Event.Edit.EditViewModel
@using SportsLiveScoreboard.Models.BindingModels.Sport.Event
@{
    ViewBag.Title = "Edit";
}

@section Stylesheets
{
    <style>
        input::-webkit-outer-spin-button,
        input::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
    </style>
}

<div class="row">
    <h1>Edit Event: @Model.Name</h1>
</div>
<div class="row">
    <div class="col-12">
        <ul class="nav nav-tabs">@*height-45px*@
            <li class="nav-item">
                <a class="nav-link @(ViewBag.Target == "code" || string.IsNullOrWhiteSpace(ViewBag.Target) ? "active" : "") text-primary" data-toggle="tab" href="#code">Code</a>
            </li>
            <li class="nav-item">
                <a class="nav-link @(ViewBag.Target == "rooms" ? "active" : "") text-success" data-toggle="tab" href="#rooms">Game Rooms</a>
            </li>
            <li class="nav-item">
                <a class="nav-link @(ViewBag.Target == "moderation" ? "active" : "") text-warning" data-toggle="tab" href="#moderation">Moderation</a>
            </li>
            <li class="nav-item">
                <a class="nav-link @(ViewBag.Target == "danger" ? "active" : "") text-danger" data-toggle="tab" href="#dangerZone">Danger Zone</a>
            </li>
        </ul>
        <div id="myTabContent" class="tab-content">
            <div class="tab-pane fade @(ViewBag.Target == "code" || string.IsNullOrWhiteSpace(ViewBag.Target) ? "show active" : "")" id="code">
                <partial name="_EditCodePartial" model="Model.EditCodeViewModel"/>
            </div>
            <div class="tab-pane fade @(ViewBag.Target == "rooms" ? "show active" : "")" id="rooms">
                <partial name="_EditEventRoomsPartial" model="Model.RoomsViewModel"/>
            </div>
            <div class="tab-pane fade @(ViewBag.Target == "moderation" ? "show active" : "")" id="moderation">
                <partial name="_EditModerationPartial" model="Model.ModeratorsViewModel"/>
            </div>
            <div class="tab-pane fade @(ViewBag.Target == "danger" ? "show active" : "")" id="dangerZone">
                <partial name="_DangerZonePartial" model="new TransferOwnership{EventId=Model.EventId}"/>
            </div>
        </div>
    </div>
</div>


@section Scripts
{
    <script>
        let codeInput = $('#codeInput');
        $('input[type=radio][name=ActivationType]').change(function() {
            if (this.value == 0) {
                codeInput.removeAttr('disabled');
            } else {
                codeInput.val('');
                $('#codeInput-error').text('');
                codeInput.attr('disabled', 'disabled');
            }
        });
    </script>
    <script>
        let eventId = "@Model.EventId";
        $(document).ready(function() {
            $('.btn-remove-tr').on('click',
                function() {
                    let row = $(this).closest('tr');
                    let id = $(this).attr('id');
                    let url = $(this).attr('post-url');
                    $.ajax({
                        url: url,
                        data: {
                            id: id,
                            eventId: eventId
                        },
                        method: "POST"
                    }).done(function() {
                        $(row).remove();
                    });
                });
            $('.delete-first').on('click',
                function() {
                    let parent = $(this).parent();
                    parent.children().forAll(x => $(x).addClass('d-none'));
                    parent.children('.delete-cancel,.btn-remove-tr').forAll(x => $(x).removeClass('d-none'));
                });
            $('.delete-cancel').on('click',
                function() {
                    let parent = $(this).parent();
                    parent.children().forAll(x => $(x).removeClass('d-none'));
                    parent.children('.delete-cancel,.btn-remove-tr').forAll(x => $(x).addClass('d-none'));
                });
        });
    </script>

    <script>
        function correspondingInput(triggerButton) {
            return $($($(triggerButton).parents('.input-group')[0]).find('input[type=number]')[0]);
        }

        function calculate(sourceElement, action) {
            let source = correspondingInput(sourceElement);
            let val = Number(source.val());
            let newVal = action(val);
            source.val(newVal);
            source.trigger("change");
            source.focus();
            $(sourceElement).focus();
        }

        $('.btn-minus').on('click',
            function() {
                calculate(this, number => --number);
            });
        $('.btn-plus').on('click',
            function() {
                calculate(this, number => ++number);
            });
    </script>

    <script>
        function getCorrespondingSpan(element) {
            return $($($(element).parents('div.form-group')[0]).children('span.of-max-games'));
        }

        $(document).ready(function() {
            let inputs = $('input.min-games');
            for (let i = 0; i < inputs.length; i++) {
                $(inputs[i]).trigger("change");
            }
        });
        $('.min-games').on('change',
            function() {
                let num = Number($(this).val());
                let distSpan = getCorrespondingSpan(this);
                distSpan.text(`of ${num * 2 - 1} games`);
            });
    </script>
}